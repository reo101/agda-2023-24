{-# OPTIONS --allow-unsolved-metas #-}

module Project.NaturalTransformation where

open import Level using (Level; levelOfTerm; _‚äî_)

open import Lib.Equality using (_‚â°_; refl)
open import Lib.‚â°-Reasoning using (begin_; step-‚â°; _‚â°‚ü®‚ü©_; _‚àé; sym; cong; cong-app; trans; subst)

open import Project.Categories using (Category; _[_,_]; _[_‚âà_]; _[_‚àò_]; HASK)
open import Project.Functor using (Functor; HomFunctor; _[_]; _[fmap_]) renaming (_‚àò_ to _‚àòF_)
open import Project.Postulates using (funext)

private
  variable
    o‚ÇÅ ‚Ñì‚ÇÅ e‚ÇÅ : Level
    o‚ÇÇ ‚Ñì‚ÇÇ e‚ÇÇ : Level
    o‚ÇÉ ‚Ñì‚ÇÉ e‚ÇÉ : Level


record NaturalTransformation (‚ÑÇ : Category {o‚ÇÅ} {‚Ñì‚ÇÅ} {e‚ÇÅ})
                             (ùîª : Category {o‚ÇÇ} {‚Ñì‚ÇÇ} {e‚ÇÇ})
                             (F G : Functor ‚ÑÇ ùîª)
       : Set (o‚ÇÅ ‚äî ‚Ñì‚ÇÅ ‚äî e‚ÇÅ ‚äî o‚ÇÇ ‚äî ‚Ñì‚ÇÇ ‚äî e‚ÇÇ) where
  private module ‚ÑÇ = Category ‚ÑÇ
  private module ùîª = Category ùîª
  private module F = Functor F
  private module G = Functor G

  field
    component : ‚àÄ (X) ‚Üí
                ùîª [ F [ X ] , G [ X ] ]

  ------------
  --- LAWS ---
  ------------
  field
    commutativity : ‚àÄ {X Y}
                    {f : ‚ÑÇ [ X , Y ]} ‚Üí
                    ùîª [ ùîª [ G [fmap f ] ‚àò component X ]
                      ‚âà ùîª [ component Y ‚àò F [fmap f ] ]
                      ]

module Helpers where
  private
    variable
      ‚ÑÇ : Category {o‚ÇÅ} {‚Ñì‚ÇÅ} {e‚ÇÅ}
      ùîª : Category {o‚ÇÇ} {‚Ñì‚ÇÇ} {e‚ÇÇ}
      ùîº : Category {o‚ÇÉ} {‚Ñì‚ÇÉ} {e‚ÇÉ}

  _~>_ : (F G : Functor ‚ÑÇ ùîª) ‚Üí
         Set _
  _~>_ {‚ÑÇ = ‚ÑÇ} {ùîª = ùîª} F G = NaturalTransformation ‚ÑÇ ùîª F G
  infixr 15 _~>_

  _‚àò·µ•_ : {F G H : Functor ‚ÑÇ ùîª} ‚Üí
         G ~> H ‚Üí
         F ~> G ‚Üí
         F ~> H
  _‚àò·µ•_ {‚ÑÇ = ‚ÑÇ} {ùîª = ùîª} Œ≤ Œ± = record
    { component = Œª { x ‚Üí Œ≤.component x ‚àò Œ±.component x }
    ; commutativity = {! !}
    }
    where
      open Category ùîª using (_‚àò_)
      module Œ± = NaturalTransformation Œ±
      module Œ≤ = NaturalTransformation Œ≤

  _‚àò‚Çï_ : {F F' : Functor ‚ÑÇ ùîª}
         {G G' : Functor ùîª ùîº} ‚Üí
         F ~> F' ‚Üí
         G ~> G' ‚Üí
         G ‚àòF F ~> G' ‚àòF F'
  _‚àò‚Çï_ {‚ÑÇ = ‚ÑÇ} {ùîª = ùîª} {ùîº = ùîº} {F = F} {F' = F'} {G = G} {G' = G'} Œ≤ Œ± = record
    { component = Œª { x ‚Üí ? ‚àò ? }
    ; commutativity = {! kek !}
    }
    where
      open Category ùîº using (_‚àò_)
      module F  = Functor F
      module F' = Functor F'
      module G  = Functor G
      module G' = Functor G'
      module Œ±  = NaturalTransformation Œ±
      module Œ≤  = NaturalTransformation Œ≤

  -- TODO: `funext` for morhpisms
  --       `‚âà-Reasoning` ?
  Id : {‚ÑÇ : Category {o‚ÇÅ} {‚Ñì‚ÇÅ} {e‚ÇÅ}}
       {ùîª : Category {o‚ÇÇ} {‚Ñì‚ÇÇ} {e‚ÇÇ}}
       (F : Functor ‚ÑÇ ùîª) ‚Üí
       F ~> F
  Id {‚ÑÇ = ‚ÑÇ} F = record
    { component = Œª { X ‚Üí F [fmap Category.id ‚ÑÇ ] }
    ; commutativity = Œª { {X} {Y} {f} ‚Üí
        ?
        -- begin
        --   ùîª [ ùîª [ F [fmap f ] ‚àò F [fmap Category.id ‚ÑÇ ] ]
        -- ‚âà‚ü® ? ‚ü©
        --   ùîª [ F [fmap Category.id ‚ÑÇ ] ‚àò F [fmap f ] ] ]
        -- ‚àé
      }
    }

  IdHASK : (F : HomFunctor HASK) ‚Üí
           F ~> F
  IdHASK F = record
    { component = Œª { X ‚Üí F [fmap ‚ÑÇ‚Å±·µà ] }
    ; commutativity = Œª { {f = f} ‚Üí funext (Œª { x ‚Üí
        begin
          (F [fmap f ]) ((F [fmap ‚ÑÇ‚Å±·µà ]) x)
        ‚â°‚ü® cong (F [fmap f ]) (cong-app F‚Å±·µà _) ‚ü© -- _ ‚â° x
          (F [fmap f ]) (‚ÑÇ‚Å±·µà x)
        ‚â°‚ü®‚ü©
          (F [fmap f ]) x
        ‚â°‚ü®‚ü©
          ‚ÑÇ‚Å±·µà ((F [fmap f ]) x)
        ‚â°‚ü® cong-app (sym F‚Å±·µà) _ ‚ü© -- _ ‚â° ((F [fmap f ]) x)
          (F [fmap ‚ÑÇ‚Å±·µà ]) ((F [fmap f ]) x)
        ‚àé
      }) }
    }
    where
      open Category HASK renaming (id to ‚ÑÇ‚Å±·µà)
      open Functor F renaming (identity to F‚Å±·µà)

open Helpers public
