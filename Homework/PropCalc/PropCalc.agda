module Homework.PropCalc.PropCalc where

open import Level using (Level; zero; suc)

open import Project.Control.Equality using (_‚â°_; refl; sym; cong; cong-app; trans; subst; ‚â°-equiv)
open import Project.EquationalReasoning as EquationalReasoning
open module ‚â°-Reasoning {n} {A} =
       EquationalReasoning.Core {n} {A} _‚â°_ {{‚â°-equiv}}
         using (begin_; _‚àº‚ü®‚ü©_; step-‚àº; _‚àé)

open import Project.Postulates using (funext)

open import Lib.Two using (ùüö; tt; ff; not; _‚àß_; _‚à®_)
open import Lib.Utils using (_‚àò_)

-- TASK
-- Prove _‚àß_ commutative
‚àß-commut : (b1 b2 : ùüö) ‚Üí b1 ‚àß b2 ‚â° b2 ‚àß b1
‚àß-commut tt tt = refl
‚àß-commut tt ff = refl
‚àß-commut ff tt = refl
‚àß-commut ff ff = refl

-- TASK
-- Prove _‚àß_ associative
‚àß-assoc : (b1 b2 b3 : ùüö) ‚Üí (b1 ‚àß b2) ‚àß b3 ‚â° b1 ‚àß (b2 ‚àß b3)
‚àß-assoc tt b2 b3 = refl
‚àß-assoc ff b2 b3 = refl

-- TASK
-- Formulate and prove the fact that _‚à®_ is commutative
‚à®-commut : (b1 b2 : ùüö) ‚Üí b1 ‚à® b2 ‚â° b2 ‚à® b1
‚à®-commut tt tt = refl
‚à®-commut tt ff = refl
‚à®-commut ff tt = refl
‚à®-commut ff ff = refl

-- TASK
-- State assocativity of ‚à® and prove it
‚à®-assoc : (b1 b2 b3 : ùüö) ‚Üí (b1 ‚à® b2) ‚à® b3 ‚â° b1 ‚à® (b2 ‚à® b3)
‚à®-assoc tt b2 b3 = refl
‚à®-assoc ff b2 b3 = refl

-- TASK
-- Formulate and prove De Morgan's laws

-- ¬¨(a ‚àß b) ‚Üî (¬¨a ‚à® ¬¨b)
dm1 : (b1 b2 : ùüö) ‚Üí not (b1 ‚àß b2) ‚â° not b1 ‚à® not b2
dm1 tt b2 = refl
dm1 ff b2 = refl

-- ¬¨(a ‚à® b) ‚Üî (¬¨a ‚àß ¬¨b)
dm2 : (b1 b2 : ùüö) ‚Üí not (b1 ‚à® b2) ‚â° not b1 ‚àß not b2
dm2 tt b2 = refl
dm2 ff b2 = refl

-- TASK
-- Define the structure of simple propositional expressions.
-- We want to support
--  1. a "false" value
--  2. a "true" value
--  3. "negating" a PropExpr
--  4. "or-ing" two PropExprs
--  5. "and-ing" two PropExprs
data PropExpr : Set where
  echt falsch : PropExpr
  –Ω–µ—Ç_ : PropExpr ‚Üí PropExpr
  _„Åã„Å§_ _„Åæ„Åü„Çè_ : PropExpr ‚Üí PropExpr ‚Üí PropExpr

-- TASK
-- You should be able to "convert" a boolean to a PropExpr
ùüö-to-PropExpr : ùüö ‚Üí PropExpr
ùüö-to-PropExpr tt = echt
ùüö-to-PropExpr ff = falsch

-- TASK
-- Execute a PropExpr by using the boolean operations that the constructors are named after
interpProp : PropExpr ‚Üí ùüö
interpProp echt = tt
interpProp falsch = ff
interpProp (–Ω–µ—Ç x) = not (interpProp x)
interpProp (x „Åã„Å§ y) = interpProp x ‚àß interpProp y
interpProp (x „Åæ„Åü„Çè y) = interpProp x ‚à® interpProp y

-- TASK
-- Formulate and prove that if you take two ùüös, ùüö-to-Propexpr them, combine them with your "and" constructor, and interpret them,
-- the result is the same as just simply _‚àß_-ing the original ùüös
homomorphism : (b1 b2 : ùüö) ‚Üí interpProp ((ùüö-to-PropExpr b1) „Åã„Å§ (ùüö-to-PropExpr b2)) ‚â° b1 ‚àß b2
homomorphism tt tt = refl
homomorphism tt ff = refl
homomorphism ff b2 = refl

-- TASK
-- Define the NAND operation over bools
nandùüö : ùüö ‚Üí ùüö ‚Üí ùüö
nandùüö tt tt = ff
nandùüö tt ff = tt
nandùüö ff tt = tt
nandùüö ff ff = tt

-- TASK
-- Define ff using tt and NAND
nandff : ùüö
nandff = nandùüö tt tt

-- TASK
-- Formulate and prove that nandff is the same thing as ff
ff‚â°nandff : ff ‚â° nandff
ff‚â°nandff = refl

-- TASK
-- Define negation using only nandùüö and any previously defined operations involving nand.
nandNot : ùüö ‚Üí ùüö
nandNot b = nandùüö b b

-- TASK
-- Formulate and prove that nandNot behaves the same way as not
not‚â°nandNot : not ‚â° nandNot
not‚â°nandNot = funext Œª { tt ‚Üí refl
                       ; ff ‚Üí refl }

-- TASK
-- Define _‚àß_ using only nandùüö and any previously defined operations involving nand.
nandAnd : ùüö ‚Üí ùüö ‚Üí ùüö
nandAnd b1 b2 = nandNot (nandùüö b1 b2)

-- TASK
-- Formulate and prove that nandAnd beahves the same way as _‚àß_
_‚àß_‚â°nandAnd : _‚àß_ ‚â° nandAnd
_‚àß_‚â°nandAnd = funext Œª { tt ‚Üí funext Œª { tt ‚Üí refl
                                       ; ff ‚Üí refl }
                       ; ff ‚Üí funext Œª { tt ‚Üí refl
                                       ; ff ‚Üí refl } }

-- TASK
-- Define _‚à®_ using only nandùüö and any previously defined operations involving nand.
nandOr : ùüö ‚Üí ùüö ‚Üí ùüö
nandOr b1 b2 = nandNot (nandAnd (nandNot b1) (nandNot b2))

-- TASK
-- Formulate and prove that nandAnd beahves the same way as _‚à®_
_‚à®_‚â°nandOr : _‚à®_ ‚â° nandOr
_‚à®_‚â°nandOr = funext Œª { tt ‚Üí funext Œª { tt ‚Üí refl
                                      ; ff ‚Üí refl }
                      ; ff ‚Üí funext Œª { tt ‚Üí refl
                                      ; ff ‚Üí refl } }

-- TASK
-- Define the structure of "nand expressions", meaning minimal boolean expressions expresed purely via NAND.
-- We want to support
--   1. a "true" value
--   2. the NAND of two NandExprs
data NandExpr : Set where
  Êú¨Áâ© : NandExpr
  NandNand : NandExpr ‚Üí NandExpr ‚Üí NandExpr

-- TASK
-- Execute a NandExpr
interpNand : NandExpr ‚Üí ùüö
interpNand Êú¨Áâ© = tt
interpNand (NandNand b1 b2) = nandùüö (interpNand b1) (interpNand b2)

-- TASK
-- Transpile a PropExpr to a NandExpr

NandFf : NandExpr
NandFf = NandNand Êú¨Áâ© Êú¨Áâ©

ff‚â°NandFf : ff ‚â° interpNand NandFf
ff‚â°NandFf = refl

NandNot : NandExpr ‚Üí NandExpr
NandNot b = NandNand b b

-- not‚â°NandNot : (b1 : NandExpr) ‚Üí not (interpNand b1) ‚â° interpNand (NandNot b1)
-- not‚â°NandNot Êú¨Áâ© = refl
-- not‚â°NandNot (NandNand b1 b2) =
--   begin
--     not (interpNand (NandNand b1 b2))
--   ‚àº‚ü® ? ‚ü©
--     interpNand (NandNot (NandNand b1 b2))
--   ‚àé

NandAnd : NandExpr ‚Üí NandExpr ‚Üí NandExpr
NandAnd b1 b2 = NandNot (NandNand b1 b2)

-- _‚àß_‚â°NandAnd : _‚àß_ ‚â° NandAnd
-- _‚àß_‚â°NandAnd = funext Œª { tt ‚Üí funext Œª { tt ‚Üí refl
--                                        ; ff ‚Üí refl }
--                        ; ff ‚Üí funext Œª { tt ‚Üí refl
--                                        ; ff ‚Üí refl } }

NandOr : NandExpr ‚Üí NandExpr ‚Üí NandExpr
NandOr b1 b2 = NandNot (NandAnd (NandNot b1) (NandNot b2))

-- _‚à®_‚â°NandOr : _‚à®_ ‚â° NandOr
-- _‚à®_‚â°NandOr = funext Œª { tt ‚Üí funext Œª { tt ‚Üí refl
--                                       ; ff ‚Üí refl }
--                       ; ff ‚Üí funext Œª { tt ‚Üí refl
--                                       ; ff ‚Üí refl } }

Prop-to-Nand : PropExpr ‚Üí NandExpr
Prop-to-Nand echt = Êú¨Áâ©
Prop-to-Nand falsch = NandFf
Prop-to-Nand (–Ω–µ—Ç b) = NandNot (Prop-to-Nand b)
Prop-to-Nand (b1 „Åã„Å§ b2) = NandAnd (Prop-to-Nand b1) (Prop-to-Nand b2)
Prop-to-Nand (b1 „Åæ„Åü„Çè b2) = NandOr (Prop-to-Nand b1) (Prop-to-Nand b2)

-- TASK
-- Formulate and prove that your Prop-to-Nand transpilation is correct in terms of interpProp and interpNand,
-- i.e. if you take a PropExpr, translate it to a NandExpr, and then interpNand it,
-- the result should be he same as interpProp-ing the original expression
takovata : ‚àÄ {x} -> interpProp x ‚â° interpNand (Prop-to-Nand x)
takovata {echt} = refl
takovata {falsch} = refl
takovata {–Ω–µ—Ç x} =
  begin
    interpProp (–Ω–µ—Ç x)
  ‚àº‚ü®‚ü©
    not (interpProp x)
  ‚àº‚ü® cong not (takovata {x}) ‚ü©
    not (interpNand (Prop-to-Nand x))
  ‚àº‚ü® cong-app not‚â°nandNot _ ‚ü©
    nandNot (interpNand (Prop-to-Nand x))
  -- ‚àº‚ü®‚ü©
  --   nandùüö (interpNand (Prop-to-Nand x)) (interpNand (Prop-to-Nand x))
  -- ‚àº‚ü®‚ü©
  --   interpNand (NandNand (Prop-to-Nand x) (Prop-to-Nand x))
  -- ‚àº‚ü®‚ü©
  --   interpNand (NandNot (Prop-to-Nand x))
  ‚àº‚ü®‚ü©
    interpNand (Prop-to-Nand (–Ω–µ—Ç x))
  ‚àé
takovata {b1 „Åã„Å§ b2} =
  begin
    interpProp (b1 „Åã„Å§ b2)
  ‚àº‚ü®‚ü©
    interpProp b1 ‚àß interpProp b2
  ‚àº‚ü® cong (interpProp b1 ‚àß_) (takovata {b2}) ‚ü©
    interpProp b1 ‚àß interpNand (Prop-to-Nand b2)
  ‚àº‚ü® cong-app (cong _‚àß_ (takovata {b1})) _ ‚ü©
    interpNand (Prop-to-Nand b1) ‚àß interpNand (Prop-to-Nand b2)
  ‚àº‚ü® cong-app (cong-app _‚àß_‚â°nandAnd _) _ ‚ü©
    nandAnd (interpNand (Prop-to-Nand b1))
            (interpNand (Prop-to-Nand b2))
  -- ‚àº‚ü®‚ü©
  --   nandNot (nandùüö (interpNand (Prop-to-Nand b1))
  --                  (interpNand (Prop-to-Nand b2)))
  -- ‚àº‚ü®‚ü©
  --   nandùüö (interpNand (NandNand (Prop-to-Nand b1)
  --                               (Prop-to-Nand b2)))
  --         (interpNand (NandNand (Prop-to-Nand b1)
  --                               (Prop-to-Nand b2)))
  -- ‚àº‚ü®‚ü©
  --   interpNand (NandNand (NandNand (Prop-to-Nand b1)
  --                                  (Prop-to-Nand b2))
  --                        (NandNand (Prop-to-Nand b1)
  --                                  (Prop-to-Nand b2)))
  -- ‚àº‚ü®‚ü©
  --   interpNand (NandNot (NandNand (Prop-to-Nand b1)
  --                                 (Prop-to-Nand b2)))
  -- ‚àº‚ü®‚ü©
  --   interpNand (NandAnd (Prop-to-Nand b1)
  --                       (Prop-to-Nand b2))
  ‚àº‚ü®‚ü©
    interpNand (Prop-to-Nand (b1 „Åã„Å§ b2))
  ‚àé
takovata {b1 „Åæ„Åü„Çè b2} =
  begin
    interpProp (b1 „Åæ„Åü„Çè b2)
  ‚àº‚ü®‚ü©
    interpProp b1 ‚à® interpProp b2
  ‚àº‚ü® cong (interpProp b1 ‚à®_) (takovata {b2}) ‚ü©
    interpProp b1 ‚à® interpNand (Prop-to-Nand b2)
  ‚àº‚ü® cong-app (cong _‚à®_ (takovata {b1})) _ ‚ü©
    interpNand (Prop-to-Nand b1) ‚à® interpNand (Prop-to-Nand b2)
  ‚àº‚ü® cong-app (cong-app _‚à®_‚â°nandOr _) _ ‚ü©
    nandOr (interpNand (Prop-to-Nand b1))
           (interpNand (Prop-to-Nand b2))
  -- ‚àº‚ü®‚ü©
  -- ...
  ‚àº‚ü®‚ü©
    interpNand (Prop-to-Nand (b1 „Åæ„Åü„Çè b2))
  ‚àé
