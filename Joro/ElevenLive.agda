{-# OPTIONS --type-in-type #-}

module Joro.ElevenLive where

open import Lib.Zero using (ùüò; zero-elim; ¬¨_)
open import Lib.One using (ùüô; ‚ü®‚ü©)
open import Lib.Two using (ùüö; tt; ff)
open import Lib.Nat using (‚Ñï; zero; suc; _+_; ozero; osuc; _‚â§_; ‚â§-refl; ‚â§-suc; ‚â§-trans; +-right-suc) renaming (_<_ to Lt)
open import Lib.Fin using (Fin; zero; suc; natToFin; finToNat)
open import Lib.Number using (Number; fromNat; Num‚Ñï; NumFin)
-- open import Lib.Sum using (_+_; inl; inr)
open import Lib.Sigma using (Œ£; _*_) renaming (_,_ to _,œÉ_)
open import Lib.Decidable using (Dec; no; yes)
open import Lib.List using (List; []; _‚à∑_; _+L_; length; +L-right-id; +L-assoc)
open import Lib.Vec using (Vec; HetVec; []; _‚à∑_; cong‚Çô)
open import Lib.Utils using (id)
open import Project.Data.Pair using (Pair; _,_; fst; snd)
open import Project.Data.Maybe using (Maybe; just; nothing)
open import Project.Control.Equality using (_‚â°_; refl; sym; cong; cong-app; trans; subst; ‚â°-equiv)
open import Project.EquationalReasoning as EquationalReasoning
open import Project.Postulates using (funext)
open module ‚â°-Reasoning {n} {A} =
       EquationalReasoning.Core {n} {A} _‚â°_ {{‚â°-equiv}}
         using (begin_; _‚àº‚ü®‚ü©_; step-‚àº; _‚àé;
                reflexive; symmetric; transitive)



-- TODO:
-- discuss levels briefly
-- example: list of types
-- example: record containing Sets
--
-- TODO: {-# OPTIONS --type-in-type #-}
--
-- TODO: postulate

-- "—Ç–∏–ø"
-- data ‚Ñï : Set where
-- data List (A : Set) : Set where
-- data List {l : Level} (A : Set l) : Set (l + 1) where
--
-- List : ?????
-- Set : ?????

-- Set : Set

-- Set0 : Set1
-- Set1 : Set2
-- Set2 : ...
-- Set_n : Set_(n+1)

-- Set : Set

--record Foo : Set where
--  field
--    bar : Set


-- TODO: categories as an abstraction for compositions
-- TODO: reminder on copatterns, going to be useful again
-- TODO: AGDA as an example
-- TODO: THREE as an example

-- TODO: monoids in general
-- TODO: monoids as single object categories
-- "all of the info is in the arrows"
-- TODO: + as example

-- TODO: preorders
-- "all of the info is in the objects"/"it doesn't matter how you get from object A to object B"
-- TODO: _‚â§_ as example

-- TODO: functors as an abstraction for homomorphisms
-- TODO: Maybe as an example

-- TODO: extensionality
-- example: add‚Ñï defined on its two args
-- example: linear search vs binary search

record Category : Set where
  field
    Obj : Set
    Arr : (x : Obj) ‚Üí (y : Obj) ‚Üí Set
    idArr : {x : Obj} ‚Üí Arr x x
    comp :
      {x y z : Obj} ‚Üí
      (f : Arr x y) ‚Üí
      (g : Arr y z) ‚Üí
      Arr x z
    idArr-comp :
      {x y : Obj}
      (f : Arr x y) ‚Üí
      comp (idArr {x}) f ‚â° f
    comp-idArr :
      {x y : Obj}
      (f : Arr x y) ‚Üí
      comp f (idArr {y}) ‚â° f
    assoc :
      {x y z w : Obj}
      (f : Arr x y) (g : Arr y z) (h : Arr z w) ‚Üí
      comp (comp f g) h ‚â° comp f (comp g h)

open Category public

-- id : {A : Set} ‚Üí A ‚Üí A
-- id x = x

-- NOTE
-- Function composition
_>>_ : {S R T : Set} ‚Üí (S ‚Üí R) ‚Üí (R ‚Üí T) ‚Üí S ‚Üí T
_>>_ f g x = g (f x)

-- C-c C-c
AGDA : Category
Obj AGDA = Set
Arr AGDA A B = A ‚Üí B
idArr AGDA = id
comp AGDA = _>>_
idArr-comp AGDA f = refl
-- comp idArr f
-- _>>_ idArr f
-- _>>_ id f
-- _>>_ (\x ‚Üí x) f
-- (\y ‚Üí _>>_ (\x ‚Üí x) f y)
-- (\y ‚Üí f ((\x ‚Üí x) y))
-- (\y ‚Üí f y)
comp-idArr AGDA f = refl
assoc AGDA f g h = refl
-- comp (comp f g) h ‚â° comp f (comp g h)
-- (f >> g) >> h ‚â° f >> (g >> h)

-- * -‚Üí *
--  \    |
--   \   |
--    \  |
--     \ |
--      \|
--       v
--       *
module Three where
  data Three : Set where
    -- zero : Three
    -- one : Three
    -- two : Three
    zero one two : Three

  data Arrow : Three ‚Üí Three ‚Üí Set where
    idArrThree : {x : Three} ‚Üí Arrow x x
    zero-one : Arrow zero one
    one-two : Arrow one two
    zero-two : Arrow zero two


  THREE : Category
  Obj THREE = Three
  Arr THREE = Arrow
  idArr THREE = idArrThree
  comp THREE idArrThree g = g
  comp THREE f idArrThree = f
  comp THREE zero-one one-two = zero-two
  idArr-comp THREE f = refl
  comp-idArr THREE idArrThree = refl
  comp-idArr THREE zero-one = refl
  comp-idArr THREE one-two = refl
  comp-idArr THREE zero-two = refl
  assoc THREE idArrThree idArrThree idArrThree = refl
  assoc THREE idArrThree idArrThree zero-one = refl
  assoc THREE idArrThree idArrThree one-two = refl
  assoc THREE idArrThree idArrThree zero-two = refl
  assoc THREE idArrThree zero-one idArrThree = refl
  assoc THREE idArrThree zero-one one-two = refl
  assoc THREE idArrThree one-two idArrThree = refl
  assoc THREE idArrThree zero-two idArrThree = refl
  assoc THREE zero-one idArrThree idArrThree = refl
  assoc THREE zero-one idArrThree one-two = refl
  assoc THREE zero-one one-two idArrThree = refl
  assoc THREE one-two idArrThree idArrThree = refl
  assoc THREE zero-two idArrThree idArrThree = refl

-- NOTE
-- "All of the info is in the objects", since there's at most one arrow between any two objects.
-- Effectively this means that with preorders we don't care how exactly we get from an arrow A to B,
-- just that there is one
record Preorder : Set where
  field
    cat : Category
    one-arrow :
      {x y : Obj cat} ‚Üí
      (f g : Arr cat x y) ‚Üí
      f ‚â° g


‚â§-unique : {n m : ‚Ñï} (p q : n ‚â§ m) ‚Üí p ‚â° q
‚â§-unique ozero ozero = refl
‚â§-unique (osuc p) (osuc q) = cong osuc (‚â§-unique p q)

skapana-agda-iskam-lean : ‚àÄ {x y} ‚Üí {f : x ‚â§ y} ‚Üí ‚â§-trans f (‚â§-refl y) ‚â° f
skapana-agda-iskam-lean {f = ozero} = refl
skapana-agda-iskam-lean {f = osuc f} = cong osuc skapana-agda-iskam-lean

skapana-agda-iskam-lean‚Ä≤ : ‚àÄ {x y} ‚Üí {f : x ‚â§ y} ‚Üí ‚â§-trans (‚â§-refl x) f ‚â° f
skapana-agda-iskam-lean‚Ä≤ {f = ozero} = refl
skapana-agda-iskam-lean‚Ä≤ {f = osuc f} = cong osuc skapana-agda-iskam-lean‚Ä≤

-- TASK
‚â§-Cat : Category
Obj ‚â§-Cat = ‚Ñï
Arr ‚â§-Cat = _‚â§_
idArr ‚â§-Cat {n} = ‚â§-refl n
comp ‚â§-Cat = ‚â§-trans
-- idArr-comp ‚â§-Cat ozero = refl
-- idArr-comp ‚â§-Cat (osuc f) = cong osuc (idArr-comp ‚â§-Cat f)
idArr-comp ‚â§-Cat f = skapana-agda-iskam-lean‚Ä≤ {f = f}
comp-idArr ‚â§-Cat f = skapana-agda-iskam-lean {f = f}
assoc ‚â§-Cat = {! ‚â§-unique ? ? !}

-- TASK
‚â§-Preorder : Preorder
‚â§-Preorder = ?

-- NOTE
-- "All of the info is in the arrows", since we only have one object.
-- Effectively this means that we only care about the arrows, and the case is usually that we have some operations as arrows.
record Monoid : Set where
  field
    cat : Category
    Obj-is-One : Obj cat ‚â° ùüô

-- TASK
‚Ñï+-Cat : Category
Obj ‚Ñï+-Cat = ùüô
Arr ‚Ñï+-Cat _ _ = ‚Ñï
idArr ‚Ñï+-Cat = zero
comp ‚Ñï+-Cat = _+_
idArr-comp ‚Ñï+-Cat = {! !}
comp-idArr ‚Ñï+-Cat = {! !}
assoc ‚Ñï+-Cat = {! !}

‚Ñï+-Monoid : Monoid
‚Ñï+-Monoid = ?

-- f : G ‚Üí H
-- f (eps_G) ‚â° eps_H
-- f (x <G> y) ‚â° f (x) <H> f (y)
-- F ((f >> g)) ‚â° F f >> F g

-- Functor
record _=>_ (C D : Category) : Set where
  field
    F-Obj : Obj C ‚Üí Obj D
    F-map :
      {x y : Obj C} ‚Üí
      (f : Arr C x y) ‚Üí
      Arr D (F-Obj x) (F-Obj y)

    F-map-id :
      (x : Obj C) ‚Üí
      F-map (idArr C {x}) ‚â° idArr D {F-Obj x}

    F-map-comp :
      {x y z : Obj C}
      (f : Arr C x y) (g : Arr C y z) ‚Üí
      F-map (comp C f g) ‚â° comp D (F-map f) (F-map g)

open _=>_ public

-- data Maybe (A : Set) : Set where
--   just : A ‚Üí Maybe A
--   nothing : Maybe A

-- –∏–º–∞ –∞–∫—Å–∏–æ–º–∞ ext
postulate
  ext :
    {A B : Set} {f g : A ‚Üí B} ‚Üí
    ((x : A) ‚Üí f x ‚â° g x) ‚Üí
    f ‚â° g

-- linear search
-- binary search

-- TASK
-- A category with one object
-- *
ONE : Category
Obj ONE = ùüô
Arr ONE _ _ = ùüô
idArr ONE = ‚ü®‚ü©
comp ONE = Œª f g ‚Üí ‚ü®‚ü©
idArr-comp ONE ‚ü®‚ü© = refl
comp-idArr ONE ‚ü®‚ü© = refl
assoc ONE ‚ü®‚ü© ‚ü®‚ü© ‚ü®‚ü© = refl

-- TASK
-- A category with two objects, with an arrow between them
-- * -‚Üí *
module TwoCat where
  data ArrTwo : ùüö ‚Üí ùüö ‚Üí Set where
    idArrTwo : {t : ùüö} ‚Üí ArrTwo t t
    arrArrTwo : ArrTwo ff tt

  TWO : Category
  Obj TWO = ùüö
  Arr TWO = ArrTwo
  idArr TWO = idArrTwo
  comp TWO idArrTwo idArrTwo = idArrTwo
  comp TWO idArrTwo arrArrTwo = arrArrTwo
  comp TWO arrArrTwo idArrTwo = arrArrTwo
  idArr-comp TWO idArrTwo = refl
  idArr-comp TWO arrArrTwo = refl
  comp-idArr TWO idArrTwo = refl
  comp-idArr TWO arrArrTwo = refl
  assoc TWO idArrTwo idArrTwo idArrTwo = refl
  assoc TWO idArrTwo idArrTwo arrArrTwo = refl
  assoc TWO idArrTwo arrArrTwo idArrTwo = refl
  assoc TWO arrArrTwo idArrTwo idArrTwo = refl

-- TASK
-- Similarly to ‚Ñï+-Cat, +L induces a category which is also a monoid.
-- The objects will be One, since it's a monoid, and the arrows will be given by the
-- list append operation (_+L_).
List-+L-Cat : Set ‚Üí Category
Obj (List-+L-Cat X) = ùüô
Arr (List-+L-Cat X) ‚ü®‚ü© ‚ü®‚ü© = List X
idArr (List-+L-Cat X) {x} = []
comp (List-+L-Cat X) f g = f +L g
idArr-comp (List-+L-Cat X) f = refl
comp-idArr (List-+L-Cat X) f = +L-right-id f
assoc (List-+L-Cat X) f g h = +L-assoc f g h

-- TASK
List-+L-Monoid : Set ‚Üí Monoid
Monoid.cat (List-+L-Monoid X) = List-+L-Cat X
Monoid.Obj-is-One (List-+L-Monoid X) = refl

-- TASK
-- A Discrete category is one in which the only arrows are the identity arrows
-- An example of such a category is the one formed with an arbitrary type, and _‚â°_ as arrows
-- Implement the discrete category where the objects are elements of the type X, and
-- the arrows are the equalities between those elements.
module DiscreteEq (X : Set) where
  Discrete‚â° : Category
  Obj Discrete‚â° = X
  Arr Discrete‚â° = _‚â°_
  idArr Discrete‚â° = refl
  comp Discrete‚â° refl refl = refl
  idArr-comp Discrete‚â° refl = refl
  comp-idArr Discrete‚â° refl = refl
  assoc Discrete‚â° refl refl refl = refl

-- TASK
-- We can make a category with whatever arrows we like if our objects are Zero.
module EmptyCat (Arrows : Set) where
  EMPTY : Category
  Obj EMPTY = ùüò
  Arr EMPTY ()
  idArr EMPTY {()}
  comp EMPTY {()}
  idArr-comp EMPTY {()}
  comp-idArr EMPTY {()}
  assoc EMPTY {()}

-- TASK
-- We can always flip the directions of arrows in a category to form the "opposite" category.
-- This actually turns out to be a very useful concept in general.
Op : Category ‚Üí Category
Obj (Op C) = Obj C
Arr (Op C) = Œª x y ‚Üí Arr C y x
idArr (Op C) = idArr C
comp (Op C) = Œª f g ‚Üí comp C g f
idArr-comp (Op C) = comp-idArr C
comp-idArr (Op C) = idArr-comp C
assoc (Op C) f g h = sym (assoc C h g f)

-- TASK
-- Given two categories, we can form their product, by having objects which are tuples of objects
-- of our original categories, and lifting everything from our original categories pointwise for those tuples.
-- _*_ is your friend.
Product : Category ‚Üí Category ‚Üí Category
Obj (Product C D) =
  Pair (Obj C) (Obj D)
Arr (Product C D) (x‚ÇÅ , x‚ÇÇ) (y‚ÇÅ , y‚ÇÇ) =
  Pair (Arr C x‚ÇÅ y‚ÇÅ) (Arr D x‚ÇÇ y‚ÇÇ)
idArr (Product C D) {x‚ÇÅ , x‚ÇÇ} =
  idArr C , idArr D
comp (Product C D) {x‚ÇÅ , y‚ÇÅ} {x‚ÇÇ , y‚ÇÇ} {x‚ÇÉ , y‚ÇÉ} (f‚ÇÅ , f‚ÇÇ) (g‚ÇÅ , g‚ÇÇ) =
  comp C f‚ÇÅ g‚ÇÅ , comp D f‚ÇÇ g‚ÇÇ
idArr-comp (Product C D) {x‚ÇÅ , y‚ÇÅ} {x‚ÇÇ , y‚ÇÇ} (f‚ÇÅ , f‚ÇÇ) =
  cong‚Çô _,_ ((comp C (idArr C) f‚ÇÅ , f‚ÇÅ) ‚à∑ (comp D (idArr D) f‚ÇÇ , f‚ÇÇ) ‚à∑ [])
            (idArr-comp C f‚ÇÅ            ‚à∑ idArr-comp D f‚ÇÇ            ‚à∑ [])
comp-idArr (Product C D) {x‚ÇÅ , y‚ÇÅ} {x‚ÇÇ , y‚ÇÇ} (f‚ÇÅ , f‚ÇÇ) =
  cong‚Çô _,_ ((comp C f‚ÇÅ (idArr C) , f‚ÇÅ) ‚à∑ (comp D f‚ÇÇ (idArr D) , f‚ÇÇ) ‚à∑ [])
            (comp-idArr C f‚ÇÅ            ‚à∑ comp-idArr D f‚ÇÇ            ‚à∑ [])
assoc (Product C D) {x‚ÇÅ , x‚ÇÇ} {y‚ÇÅ , y‚ÇÇ} {z‚ÇÅ , z‚ÇÇ} {w‚ÇÅ , w‚ÇÇ} (f‚ÇÅ , f‚ÇÇ) (g‚ÇÅ , g‚ÇÇ) (h‚ÇÅ , h‚ÇÇ) =
  cong‚Çô _,_ ((comp C (comp C f‚ÇÅ g‚ÇÅ) h‚ÇÅ , comp C f‚ÇÅ (comp C g‚ÇÅ h‚ÇÅ)) ‚à∑
             (comp D (comp D f‚ÇÇ g‚ÇÇ) h‚ÇÇ , comp D f‚ÇÇ (comp D g‚ÇÇ h‚ÇÇ)) ‚à∑
             [])
            (assoc C f‚ÇÅ g‚ÇÅ h‚ÇÅ ‚à∑
             assoc D f‚ÇÇ g‚ÇÇ h‚ÇÇ ‚à∑
             [])

-- TASK
-- "Doing nothing" is a functor, i.e. we don't change the objects and we don't change the arrows.
ID : (C : Category) ‚Üí C => C
F-Obj (ID C) = id
F-map (ID C) f = f
F-map-id (ID C) x = refl
F-map-comp (ID C) f g = refl

fmapMaybe :
  {A B : Set} ‚Üí
  (A ‚Üí B) ‚Üí
  Maybe A ‚Üí
  Maybe B
fmapMaybe f (just x) = just (f x)
fmapMaybe f nothing = nothing

fmapMaybe-id :
  {A : Set}
  (x : Maybe A) ‚Üí
  fmapMaybe id x ‚â° x
fmapMaybe-id (just x) = refl
fmapMaybe-id nothing = refl

-- TASK
MAYBE : AGDA => AGDA
F-Obj MAYBE A = Maybe A
F-map MAYBE = fmapMaybe
F-map-id MAYBE a =
  ext fmapMaybe-id
F-map-comp MAYBE f g = funext Œª
  { nothing ‚Üí refl
  ; (just x) ‚Üí refl
  }

-- TASK
map : {A B : Set} ‚Üí (A ‚Üí B) ‚Üí List A ‚Üí List B
map f [] = []
map f (x ‚à∑ xs) = f x ‚à∑ map f xs

-- TASK
-- Mapping with the iden
map-id : {A : Set} (xs : List A) ‚Üí map id xs ‚â° xs
map-id [] = refl
map-id (x ‚à∑ xs) = cong (x ‚à∑_) (map-id xs)

-- TASK
-- Mapping with a composition of functions is the same as mapping with
-- one function, and then mapping with the other function.
map-compose :
  {A B C : Set} (f : A ‚Üí B) (g : B ‚Üí C) (xs : List A) ‚Üí
  map (f >> g) xs ‚â° map g (map f xs)
map-compose f g [] = refl
map-compose f g (x ‚à∑ xs) = cong (g (f x) ‚à∑_) (map-compose f g xs)

-- TASK
-- The List type constructor is a functor, in the same way that Maybe is a functor.
LIST : AGDA => AGDA
F-Obj LIST A = List A
F-map LIST f xs = map f xs
F-map-id LIST A = funext map-id
F-map-comp LIST f g = funext (map-compose f g)

-- TASK
-- Addition with the constant k forms a functor over the preorder ‚Ñï category
ADD : ‚Ñï ‚Üí ‚â§-Cat => ‚â§-Cat
F-Obj (ADD k) x = k + x
F-map (ADD zero) f = f
F-map (ADD (suc k)) f = osuc (F-map (ADD k) f)
F-map-id (ADD zero) x = refl
F-map-id (ADD (suc k)) x = cong osuc (F-map-id (ADD k) x)
F-map-comp (ADD zero) f g = refl
F-map-comp (ADD (suc k)) f g = cong osuc (F-map-comp (ADD k) f g)

-- TASK
-- Mapping with a function (f : X ‚Üí Y) over a list induces a functor between the monoid
-- categories of lists over X and Y respectively.
LIST+L : {X Y : Set} (f : X ‚Üí Y) ‚Üí List-+L-Cat X => List-+L-Cat Y
F-Obj (LIST+L f) _ = ‚ü®‚ü©
F-map (LIST+L f) [] = []
F-map (LIST+L f) (x ‚à∑ xs) = f x ‚à∑ F-map (LIST+L f) xs
F-map-id (LIST+L f) x = refl
F-map-comp (LIST+L f) [] ys = refl
F-map-comp (LIST+L f) (x ‚à∑ xs) ys = cong (f x ‚à∑_) (F-map-comp (LIST+L f) xs ys)

-- TASK
-- Define the "is prefix of" relation between lists
data _‚â§L_ {A : Set} : List A ‚Üí List A ‚Üí Set where
  ‚â§-[] : {ys : List A} ‚Üí [] ‚â§L ys
  ‚â§-‚à∑ : {x : A} {xs ys : List A} ‚Üí xs ‚â§L ys ‚Üí x ‚à∑ xs ‚â§L x ‚à∑ ys

infix 15 _‚â§L_
 
module ‚â§L-Cats {A : Set} where
  -- TASK
  -- Prove that lists of A equipped with _‚â§L_ form a category
  ‚â§L-Cat : Category
  Obj ‚â§L-Cat = List A
  Arr ‚â§L-Cat = _‚â§L_
  idArr ‚â§L-Cat {[]} = ‚â§-[]
  idArr ‚â§L-Cat {x ‚à∑ xs} = ‚â§-‚à∑ {x = x} {xs = xs} {ys = xs} (idArr ‚â§L-Cat)
  comp ‚â§L-Cat ‚â§-[] g = ‚â§-[]
  comp ‚â§L-Cat (‚â§-‚à∑ f) (‚â§-‚à∑ g) = ‚â§-‚à∑ (comp ‚â§L-Cat f g)
  idArr-comp ‚â§L-Cat ‚â§-[] = refl
  idArr-comp ‚â§L-Cat (‚â§-‚à∑ f) = cong ‚â§-‚à∑ (idArr-comp ‚â§L-Cat f)
  comp-idArr ‚â§L-Cat ‚â§-[] = refl
  comp-idArr ‚â§L-Cat (‚â§-‚à∑ f) = cong ‚â§-‚à∑ (comp-idArr ‚â§L-Cat f)
  assoc ‚â§L-Cat ‚â§-[] ‚â§-[] ‚â§-[] = refl
  assoc ‚â§L-Cat ‚â§-[] ‚â§-[] (‚â§-‚à∑ h) = refl
  assoc ‚â§L-Cat ‚â§-[] (‚â§-‚à∑ g) (‚â§-‚à∑ h) = refl
  assoc ‚â§L-Cat (‚â§-‚à∑ f) (‚â§-‚à∑ g) (‚â§-‚à∑ h) = cong ‚â§-‚à∑ (assoc ‚â§L-Cat f g h)

  -- TASK
  -- Prove that that category is a preorder
  ‚â§L-Preorder : Preorder
  Preorder.cat ‚â§L-Preorder = ‚â§L-Cat
  Preorder.one-arrow ‚â§L-Preorder ‚â§-[] ‚â§-[] = refl
  Preorder.one-arrow ‚â§L-Preorder (‚â§-‚à∑ f) (‚â§-‚à∑ g) = cong ‚â§-‚à∑ (Preorder.one-arrow ‚â§L-Preorder f g)

  -- TASK
  -- We can form a functor from list prefixes to _‚â§_.
  -- Implement it.
  Drop-Elems : ‚â§L-Cat => ‚â§-Cat
  F-Obj Drop-Elems = length
  F-map Drop-Elems ‚â§-[] = ozero
  F-map Drop-Elems (‚â§-‚à∑ f) = osuc (F-map Drop-Elems f)
  F-map-id Drop-Elems [] = refl
  F-map-id Drop-Elems (x ‚à∑ xs) = cong osuc (F-map-id Drop-Elems xs)
  F-map-comp Drop-Elems ‚â§-[] g = refl
  F-map-comp Drop-Elems (‚â§-‚à∑ f) (‚â§-‚à∑ g) = cong osuc (F-map-comp Drop-Elems f g)

-- TASK
-- Implement the function which takes a prefix of n elements from a Vector of size m,
-- by using the proof that n ‚â§ m to allow us to do so
-- We've already implement this previously, so feel free to copy it if you'd like
vTake : {A : Set} {n m : ‚Ñï} ‚Üí n ‚â§ m ‚Üí Vec A m ‚Üí Vec A n
vTake ozero xs = []
vTake (osuc f) (x ‚à∑ xs) = x ‚à∑ vTake f xs

-- TASK
-- vTake gives rise to a functor, sending _‚â§_ functions over Vec A
-- If we look at vTakes signature, we'll notice that n ‚â§ m is transformed into (Vec A m ‚Üí Vec A n) -
-- note how the places of n and m are swapped.
-- As a consequence, we need to use the opposite cateogry of ‚â§-Cat here, to make things line up.
{-# TERMINATING #-}
VTAKE : Set ‚Üí Op ‚â§-Cat => AGDA
F-Obj (VTAKE X) n = Vec X n
F-map (VTAKE X) {m} {n} f xs = vTake f xs
F-map-id (VTAKE X) zero = funext Œª { [] ‚Üí refl }
F-map-id (VTAKE X) (suc n) = funext Œª { (x ‚à∑ xs) ‚Üí cong (x ‚à∑_) (cong-app (F-map-id (VTAKE X) n) xs) }
F-map-comp (VTAKE X) ozero ozero = funext Œª { [] ‚Üí refl
                                            ; (x ‚à∑ xs) ‚Üí refl }
F-map-comp (VTAKE X) (osuc f) ozero = funext Œª { (x ‚à∑ xs) ‚Üí refl }
F-map-comp (VTAKE X) (osuc f) (osuc g) = funext Œª { (x ‚à∑ xs) ‚Üí cong (x ‚à∑_) (cong-app (F-map-comp (VTAKE X) f g) xs) }

module FreeCat (X : Set) (R : X ‚Üí X ‚Üí Set) where
  -- TASK
  -- Given a type X and a binary relation R over X, we can form a "free category" based on X and R in the usual sense of "free algebraic structure".
  -- That is, we will force all the properties required of a category to hold synthetically, by introducing a new relation Free R : X ‚Üí X ‚Üí Set,
  -- such that X and Free R form a category.
  --
  -- Essentially, this means that we want to add some additional properties to R to get Free R, so that we can then prove our Category laws
  --
  -- Implement the datatype Free which adds those properties to R. It might be helpful to first try implementing the FREE
  -- category, to figure out what exactly you need.
  data Free : X ‚Üí X ‚Üí Set where
    free-id : {x : X} ‚Üí Free x x
    free-comp : {x y z : X} ‚Üí Free x y ‚Üí Free y z ‚Üí Free x z
    free-real : {x y : X} ‚Üí R x y ‚Üí Free x y

  -- TASK
  -- Since Free will form the arrows for our category, we will of course also need a way to compose Frees
  compFree : {x y z : X} ‚Üí Free x y ‚Üí Free y z ‚Üí Free x z
  compFree = free-comp

  -- TASK
  -- Implement the free category over X and R by using Free and compFree
  FREE : Category
  Obj FREE = X
  Arr FREE = Free
  idArr FREE = free-id
  comp FREE = free-comp
  idArr-comp FREE free-id = {! !}
  idArr-comp FREE (free-comp f‚ÇÅ f‚ÇÇ) = {! !}
  idArr-comp FREE (free-real r) = {! !}
  comp-idArr FREE = {! !}
  assoc FREE = {! !}

module Finite where
  -- TASK
  -- We've seen a few finite categories - ZERO, TWO, THREE
  -- We can take advantage of Fin n to define a generalised finite category, mimicking THREE.
  -- If we want a category "of size n", we'll take Fin n to be the objects.
  --
  -- The arrows will roughly be defined as
  -- n ~> m iff n ‚â§ m
  --
  -- Think about how to define all of these and implement the FINITE category.

  FINITE : ‚Ñï ‚Üí Category
  Obj (FINITE n) = Fin n
  Arr (FINITE zero) () y
  Arr (FINITE (suc n)) zero y = ùüô
  Arr (FINITE (suc n)) (suc x) zero = ùüò
  Arr (FINITE (suc n)) (suc x) (suc y) = Arr (FINITE n) x y
  idArr (FINITE (suc n)) {zero} = ‚ü®‚ü©
  idArr (FINITE (suc n)) {suc x} = idArr (FINITE n)
  comp (FINITE (suc n)) {zero} {zero} {zero} f g = ‚ü®‚ü©
  comp (FINITE (suc n)) {zero} {zero} {suc z} f g = ‚ü®‚ü©
  comp (FINITE (suc n)) {zero} {suc y} {suc z} f g = ‚ü®‚ü©
  comp (FINITE (suc n)) {suc x} {suc y} {suc z} f g = comp (FINITE n) {x} {y} {z} f g
  idArr-comp (FINITE (suc n)) {zero} {zero} ‚ü®‚ü© = refl
  idArr-comp (FINITE (suc n)) {zero} {suc y} ‚ü®‚ü© = refl
  idArr-comp (FINITE (suc n)) {suc x} {suc y} f = idArr-comp (FINITE n) {x} {y} f
  comp-idArr (FINITE (suc n)) {zero} {zero} ‚ü®‚ü© = refl
  comp-idArr (FINITE (suc n)) {zero} {suc y} ‚ü®‚ü© = refl
  comp-idArr (FINITE (suc n)) {suc x} {suc y} f = comp-idArr (FINITE n) {x} {y} f
  assoc (FINITE (suc n)) {zero} {zero} {zero} {zero} f g h = refl
  assoc (FINITE (suc n)) {zero} {zero} {zero} {suc w} f g h = refl
  assoc (FINITE (suc n)) {zero} {zero} {suc z} {suc w} f g h = refl
  assoc (FINITE (suc n)) {zero} {suc y} {suc z} {suc w} f g h = refl
  assoc (FINITE (suc n)) {suc x} {suc y} {suc z} {suc w} f g h = assoc (FINITE n) {x} {y} {z} {w} f g h

  FINITE‚Ä≤ : ‚Ñï ‚Üí Category
  Obj (FINITE‚Ä≤ n) = Fin n
  Arr (FINITE‚Ä≤ n) x y = finToNat x ‚â§ finToNat y
  idArr (FINITE‚Ä≤ (suc n)) {zero} = ozero
  idArr (FINITE‚Ä≤ (suc n)) {suc x} = osuc (idArr (FINITE‚Ä≤ n) {x})
  comp (FINITE‚Ä≤ (suc n)) {zero} {zero} {zero} ozero ozero = ozero
  comp (FINITE‚Ä≤ (suc n)) {zero} {zero} {suc z} ozero ozero = ozero
  comp (FINITE‚Ä≤ (suc n)) {zero} {suc y} {suc z} ozero (osuc g) = ozero
  comp (FINITE‚Ä≤ (suc n)) {suc x} {suc y} {suc z} (osuc f) (osuc g) = osuc (comp (FINITE‚Ä≤ n) {x} {y} {z} f g)
  idArr-comp (FINITE‚Ä≤ (suc n)) {zero} {zero} ozero = refl
  idArr-comp (FINITE‚Ä≤ (suc n)) {zero} {suc y} ozero = refl
  idArr-comp (FINITE‚Ä≤ (suc n)) {suc x} {suc y} (osuc f) = cong osuc (idArr-comp (FINITE‚Ä≤ n) {x} {y} f)
  comp-idArr (FINITE‚Ä≤ (suc n)) {zero} {zero} ozero = refl
  comp-idArr (FINITE‚Ä≤ (suc n)) {zero} {suc y} ozero = refl
  comp-idArr (FINITE‚Ä≤ (suc n)) {suc x} {suc y} (osuc f) = cong osuc (comp-idArr (FINITE‚Ä≤ n) {x} {y} f)
  assoc (FINITE‚Ä≤ (suc n)) {zero} {zero} {zero} {zero} ozero ozero ozero = refl
  assoc (FINITE‚Ä≤ (suc n)) {zero} {zero} {zero} {suc w} ozero ozero ozero = refl
  assoc (FINITE‚Ä≤ (suc n)) {zero} {zero} {suc z} {suc w} ozero ozero (osuc h) = refl
  assoc (FINITE‚Ä≤ (suc n)) {zero} {suc y} {suc z} {suc w} ozero (osuc g) (osuc h) = refl
  assoc (FINITE‚Ä≤ (suc n)) {suc x} {suc y} {suc z} {suc w} (osuc f) (osuc g) (osuc h) = cong osuc (assoc (FINITE‚Ä≤ n) {x} {y} {z} {w} f g h)
