module Homework.Elevator.Elevator where

open import Lib.Zero using (ùüò)
open import Lib.One using (ùüô; ‚ü®‚ü©)
open import Lib.Two using (ùüö; tt; ff; not; _&&_; _||_)
open import Lib.Sum using (_+_; inl; inr)

Is : ùüö ‚Üí Set
Is tt = ùüô
Is ff = ùüò

data State : Set where
  -- vacant  : State
  -- closing : State
  -- moving  : State
  vacant closing moving : State

eqState : State ‚Üí State ‚Üí ùüö
eqState vacant  vacant  = tt
eqState closing closing = tt
eqState moving  moving  = tt
{-# CATCHALL #-}
eqState _       _       = ff

_=‚Çõ_ : State ‚Üí State ‚Üí ùüö
_=‚Çõ_ = eqState

_‚â†‚Çõ_ : State ‚Üí State ‚Üí ùüö
_‚â†‚Çõ_ = \ s‚ÇÅ s‚ÇÇ ‚Üí not (s‚ÇÅ =‚Çõ s‚ÇÇ)

data Action : State -> Set where
  callFrom goTo : Action vacant
  openDoors closeDoors : Action closing
  arrive : Action moving
open Action

eqAction : ‚àÄ {s‚ÇÅ s‚ÇÇ} ‚Üí Action s‚ÇÅ ‚Üí Action s‚ÇÇ ‚Üí ùüö
eqAction callFrom   callFrom   = tt
eqAction goTo       goTo       = tt
eqAction openDoors  openDoors  = tt
eqAction closeDoors closeDoors = tt
eqAction arrive     arrive     = tt
{-# CATCHALL #-}
eqAction _          _          = ff

_=‚Çê_ : ‚àÄ {s‚ÇÅ s‚ÇÇ} ‚Üí Action s‚ÇÅ ‚Üí Action s‚ÇÇ ‚Üí ùüö
_=‚Çê_ = eqAction

_‚â†‚Çê_ : ‚àÄ {s‚ÇÅ s‚ÇÇ} ‚Üí Action s‚ÇÅ ‚Üí Action s‚ÇÇ ‚Üí ùüö
_‚â†‚Çê_ = \ a‚ÇÅ a‚ÇÇ ‚Üí not (a‚ÇÅ =‚Çê a‚ÇÇ)

transition : (s : State)  ‚Üí Action s ‚Üí State
transition vacant  callFrom   = closing
transition vacant  goTo       = closing
transition closing openDoors  = vacant
transition closing closeDoors = moving
transition moving  arrive     = vacant

_ : (a : Action moving) ‚Üí
    Is (a =‚Çê arrive && transition moving a =‚Çõ vacant)
_ = Œª { arrive ‚Üí ‚ü®‚ü© }

_ : (a : Action vacant) ‚Üí
    Is (transition vacant a =‚Çõ closing)
_ = Œª { callFrom ‚Üí ‚ü®‚ü©; goTo ‚Üí ‚ü®‚ü© }
 
_ : (a : Action closing) ‚Üí
    Is (transition closing a =‚Çõ vacant || transition closing a =‚Çõ moving)
_ = Œª { openDoors ‚Üí ‚ü®‚ü©; closeDoors ‚Üí ‚ü®‚ü© }

transition-progress :
  (s : State)
  (a : Action s) ‚Üí
  Is (s ‚â†‚Çõ transition s a)
transition-progress vacant  callFrom   = ‚ü®‚ü©
transition-progress vacant  goTo       = ‚ü®‚ü©
transition-progress closing openDoors  = ‚ü®‚ü©
transition-progress closing closeDoors = ‚ü®‚ü©
transition-progress moving  arrive     = ‚ü®‚ü©
